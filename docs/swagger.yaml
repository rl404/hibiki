basePath: /
definitions:
  service.Manga:
    properties:
      alternative_titles:
        $ref: '#/definitions/service.alternativeTitles'
      authors:
        items:
          $ref: '#/definitions/service.author'
        type: array
      background:
        type: string
      chapter:
        type: integer
      end_date:
        $ref: '#/definitions/service.date'
      genres:
        items:
          $ref: '#/definitions/service.genre'
        type: array
      id:
        type: integer
      mean:
        type: number
      member:
        type: integer
      nsfw:
        type: boolean
      picture:
        type: string
      pictures:
        items:
          type: string
        type: array
      popularity:
        type: integer
      rank:
        type: integer
      related:
        items:
          $ref: '#/definitions/service.related'
        type: array
      serialization:
        items:
          $ref: '#/definitions/service.magazine'
        type: array
      start_date:
        $ref: '#/definitions/service.date'
      status:
        type: string
      synopsis:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      volume:
        type: integer
      voter:
        type: integer
    type: object
  service.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  service.UserManga:
    properties:
      chapter:
        type: integer
      comment:
        type: string
      manga_id:
        type: integer
      score:
        type: integer
      status:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      volume:
        type: integer
    type: object
  service.alternativeTitles:
    properties:
      english:
        type: string
      japanese:
        type: string
      synonyms:
        items:
          type: string
        type: array
    type: object
  service.author:
    properties:
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  service.date:
    properties:
      day:
        type: integer
      month:
        type: integer
      year:
        type: integer
    type: object
  service.genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  service.magazine:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  service.related:
    properties:
      id:
        type: integer
      picture:
        type: string
      relation:
        type: string
      title:
        type: string
    type: object
  utils.Response:
    properties:
      data:
        type: object
      message:
        type: string
      meta:
        type: object
      status:
        type: integer
    type: object
info:
  contact: {}
  description: Hibiki API.
  title: Hibiki API
paths:
  /manga/{mangaID}:
    get:
      parameters:
      - description: manga id
        in: path
        name: mangaID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/service.Manga'
              type: object
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get manga by id.
      tags:
      - Manga
  /user/{username}/manga:
    get:
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - default: 1
        description: page
        in: query
        name: page
        type: integer
      - default: 20
        description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/service.UserManga'
                  type: array
                meta:
                  $ref: '#/definitions/service.Pagination'
              type: object
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get user's manga.
      tags:
      - User
schemes:
- http
- https
swagger: "2.0"
